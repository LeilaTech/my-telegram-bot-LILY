from aiogram import Router, types  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã aiogram –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–æ–º –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
from aiogram.filters import Command  # –§–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
from utils.randomfox import fox  # –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –ª–∏—Å—ã
from utils.randomcat import cat  # –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –∫–æ—à–∫–∏
from utils.randomdog import dog  # –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å–æ–±–∞–∫–∏
from keyboards.keyboards import kb1, kb2, kb3  # –ò–º–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from random import randint  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª

# –°–æ–∑–¥–∞—ë–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=kb1)

@router.message(Command("stop"))
async def cmd_stop(message: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /stop.
    –ü—Ä–æ—â–∞–µ—Ç—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    await message.answer("–î–æ –≤—Å—Ç—Ä–µ—á–∏! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–µ–Ω—è!")

@router.message(lambda message: message.text.lower() in ["–ø—Ä–∏–≤–µ—Ç", "hello"])
async def cmd_hello(message: types.Message):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ("–ø—Ä–∏–≤–µ—Ç", "hello").
    """
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=kb1)

@router.message(lambda message: message.text.lower() == "–ø–æ–∫–∞")
async def cmd_bye(message: types.Message):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø—Ä–æ—â–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ("–ø–æ–∫–∞").
    """
    await message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {message.chat.first_name}! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –∫–æ–≥–¥–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å!", reply_markup=kb1)

@router.message(lambda message: message.text.lower() in ["—Ç—ã –∫—Ç–æ", "–∫—Ç–æ —Ç—ã"])
async def cmd_who(message: types.Message):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å "—Ç—ã –∫—Ç–æ?" –∏–ª–∏ "–∫—Ç–æ —Ç—ã?".
    """
    await message.answer("–Ø –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –∏ –ø–æ–º–æ—â–∏! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

@router.message(lambda message: message.text.lower() in ["–∂–∏–≤–æ—Ç–Ω—ã–µ", "animals"])
async def cmd_animals(message: types.Message):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∂–∏–≤–æ—Ç–Ω—ã—Ö.
    """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:", reply_markup=kb2)

@router.message(lambda message: message.text.lower() in ["–ª–∏—Å–∞", "fox"])
async def cmd_fox(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Å—ã.
    """
    await message.answer_photo(photo=fox(), caption="–í–æ—Ç –≤–∞—à–∞ –ª–∏—Å–∞!")

@router.message(lambda message: message.text.lower() in ["–∫–æ—à–∫–∞", "cat", "–∫–æ—Ç"])
async def cmd_cat(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—à–∫–∏.
    """
    await message.answer_photo(photo=cat(), caption="–í–æ—Ç –≤–∞—à–∞ –∫–æ—à–∫–∞!")

@router.message(lambda message: message.text.lower() in ["—Å–æ–±–∞–∫–∞", "dog"])
async def cmd_dog(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±–∞–∫–∏.
    """
    await message.answer_photo(photo=dog(), caption="–í–æ—Ç –≤–∞—à–∞ —Å–æ–±–∞–∫–∞!")

@router.message(lambda message: message.text.lower() == "–∏–≥—Ä–∞")
async def cmd_game(message: types.Message):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∏–≥—Ä–æ–≤–æ–µ –º–µ–Ω—é.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–≥—Ä–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
    """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", reply_markup=kb3)

@router.message(lambda message: message.text.lower() == "—á–∏—Å–ª–æ")
async def cmd_num(message: types.Message):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 10.
    """
    number = randint(1, 10)
    await message.answer(f"–í–∞—à–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {number}")

@router.message(lambda message: message.text.lower() == "–∫—É–±–∏–∫")
async def cmd_kubik(message: types.Message):
    """
    –°–∏–º—É–ª–∏—Ä—É–µ—Ç –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    """
    await message.answer_dice(emoji="üé≤")

@router.message(lambda message: message.text.lower() == "–Ω–∞–∑–∞–¥")
async def cmd_back(message: types.Message):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb1)

@router.message()
async def echo(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–æ–º–∞–Ω–¥–∞–º–∏.
    –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ.
    """
    user_text = message.text
    if user_text.lower() not in [
        "–ø—Ä–∏–≤–µ—Ç", "hello", "–ø–æ–∫–∞", "—Ç—ã –∫—Ç–æ", "–∫—Ç–æ —Ç—ã", "–∂–∏–≤–æ—Ç–Ω—ã–µ", "animals",
        "–ª–∏—Å–∞", "fox", "–∫–æ—à–∫–∞", "cat", "–∫–æ—Ç", "—Å–æ–±–∞–∫–∞", "dog", "–∏–≥—Ä–∞", "—á–∏—Å–ª–æ",
        "–∫—É–±–∏–∫", "–Ω–∞–∑–∞–¥", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, —Ç–µ–∫—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ –≥–æ–ª–æ—Å
        from echo.echo_tts import tts_handler
        await tts_handler(message)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(message.text)
